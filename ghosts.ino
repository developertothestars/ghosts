/* ghosts.ino */
 
#include "SPI.h"
#include "ILI9341_t3.h"

#define TFT_DC  9
#define TFT_CS 10

ILI9341_t3 tft = ILI9341_t3(TFT_CS, TFT_DC);

typedef struct rgbinfo {
  char r;
  char g;
  char b;
};

typedef struct sprite {
  struct rgbinfo rgbtable[8];
  int dimx;
  int dimy;
  char *spritearray;
};

typedef struct tile {
  struct rgbinfo color;
  char data[8];
};

#define TWIDTH  28
#define THEIGHT 36
#define XOFFS    8
#define YOFFS   16

struct tile tileinfo[] = {
  {{0x00, 0x00, 0x00},
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {{0x21, 0x21, 0xde},                               /*  1 UL2 */
    0x0f, 0x30, 0x40, 0x47, 0x88, 0x90, 0x90, 0x90}, /*  1     */
  {{0x21, 0x21, 0xde},                               /*  2 HH2 */
    0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00}, /*  2     */
  {{0x21, 0x21, 0xde},                               /*  3 UR2 */
    0xf0, 0x0c, 0x02, 0xe2, 0x11, 0x09, 0x09, 0x09}, /*  3     */
  {{0x21, 0x21, 0xde},                               /*  4 UR2 */
    0xff, 0x00, 0x00, 0xe0, 0x10, 0x08, 0x08, 0x08}, /*  4 fancy */
  {{0x21, 0x21, 0xde},                               /*  5 UL2   */
    0xff, 0x00, 0x00, 0x07, 0x08, 0x10, 0x10, 0x10}, /*  5 fancy */
  {{0x21, 0x21, 0xde},                               /*  6 VV2 0x90 */
    0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90}, /*  6          */
  {{0x21, 0x21, 0xde},                               /*  7 VV2 0x09 */
    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09}, /*  7          */
  {{0xff, 0xcc, 0x99},                               /*  8 pellet   */
    0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00}, /*  8          */
  {{0x21, 0x21, 0xde},                               /*  9 VV1 0x08 */
    0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08}, /*  9          */
  {{0x21, 0x21, 0xde},                               /* 10 VV1 0x10 */
    0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10}, /* 10          */
  {{0x21, 0x21, 0xde},                               /* 11 UL1      */
    0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x08, 0x08}, /* 11          */
  {{0x21, 0x21, 0xde},                               /* 12 HH1 0x08 */
    0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00}, /* 12          */
  {{0x21, 0x21, 0xde},                               /* 13 UR1 0x08 */
    0x00, 0x00, 0x00, 0x00, 0xc0, 0x20, 0x10, 0x10}, /* 13     0x80 */
  {{0xff, 0xcc, 0x99},                               /* 14 large    */
    0x3c, 0x7e, 0xff, 0xff, 0xff, 0xff, 0x7e, 0x3c}, /* 14 pellet   */
  {{0x21, 0x21, 0xde},                               /* 15 LL1      */
    0x08, 0x08, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00}, /* 15          */
  {{0x21, 0x21, 0xde},                               /* 16          */
    0x10, 0x10, 0x20, 0xc0, 0x00, 0x00, 0x00, 0x00}, /* 16 LR1      */
  {{0x21, 0x21, 0xde},                               /* 17          */
    0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00}, /* 17 HH1 0x10 */
  {{0x21, 0x21, 0xde},                               /* 18          */
    0x90, 0x90, 0x90, 0x88, 0x47, 0x40, 0x30, 0x0f}, /* 18 LL2      */
  {{0x21, 0x21, 0xde},                               /* 19          */
    0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff}, /* 19 HH2      */
  {{0x21, 0x21, 0xde},                               /* 20          */
    0x09, 0x09, 0x09, 0x11, 0xe2, 0x02, 0x0c, 0xf0}, /* 20 LR2      */
  {{0x21, 0x21, 0xde},                               /* 21          */
    0x00, 0x00, 0x00, 0x00, 0x0f, 0x08, 0x08, 0x09}, /* 21 UL2      */
  {{0x21, 0x21, 0xde},                               /* 22 HH2      */
    0x00, 0x00, 0x00, 0x00, 0xff, 0x01, 0x01, 0xff}, /* 22          */
  {{0x21, 0x21, 0xde},                               /* 23 HH2      */
    0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x80, 0xff}, /* 23          */
  {{0x21, 0x21, 0xde},                               /* 24 UR2      */
    0x00, 0x00, 0x00, 0x00, 0xf0, 0x10, 0x10, 0x90}, /* 24          */
  {{0xff, 0xb8, 0xde},                               /* 25 HH       */
    0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00}, /* 25          */
  {{0x21, 0x21, 0xde},                               /* 26 LL       */
    0x09, 0x08, 0x08, 0x0f, 0x00, 0x00, 0x00, 0x00}, /* 26          */
  {{0x21, 0x21, 0xde},                               /* 27 LR       */
    0x90, 0x10, 0x10, 0xf0, 0x00, 0x00, 0x00, 0x00}, /* 27          */
  {{0x21, 0x21, 0xde},
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}};

char tilemap[THEIGHT][TWIDTH] =
       {{ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 1,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  4,
          5,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  3},
        { 6,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  9,
         10,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  7},
        { 6,  8, 11, 12, 12, 13,  8, 11, 12, 12, 12, 13,  8,  9,
         10,  8, 11, 12, 12, 12, 13,  8, 11, 12, 12, 13,  8,  7},
        { 6, 14, 10,  0,  0,  9,  8, 10,  0,  0,  0,  9,  8,  9,
         10,  8, 10,  0,  0,  0,  9,  8, 10,  0,  0,  9, 14,  7},
        { 6,  8, 15, 17, 17, 16,  8, 15, 17, 17, 17, 16,  8, 15,
         16,  8, 15, 17, 17, 17, 16,  8, 15, 17, 17, 16,  8,  7},
        { 6,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,
          8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  7},
        { 6,  8, 11, 12, 12, 13,  8, 11, 13,  8, 11, 12, 12, 12,
         12, 12, 12, 13,  8, 11, 13,  8, 11, 12, 12, 13,  8,  7},
        { 6,  8, 15, 17, 17, 16,  8,  9, 10,  8, 15, 17, 17, 13,
         11, 17, 17, 16,  8,  9, 10,  8, 15, 17, 17, 16,  8,  7},
        { 6,  8,  8,  8,  8,  8,  8,  9, 10,  8,  8,  8,  8,  9,
         10,  8,  8,  8,  8,  9, 10,  8,  8,  8,  8,  8,  8,  7},
        {18, 19, 19, 19, 19, 13,  8,  9, 15, 12, 12, 13,  0,  9,
         10,  0, 11, 12, 12, 16, 10,  8, 11, 19, 19, 19, 19, 20},
        { 0,  0,  0,  0,  0,  6,  8,  9, 11, 17, 17, 16,  0, 15,
         16,  0, 15, 17, 17, 13, 10,  8,  7,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  6,  8,  9, 10,  0,  0,  0,  0,  0,
          0,  0,  0,  0,  0,  9, 10,  8,  7,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  6,  8,  9, 10,  0, 21, 19, 22, 25,
         25, 23, 19, 24,  0,  9, 10,  8,  7,  0,  0,  0,  0,  0},
        { 2,  2,  2,  2,  2, 16,  8, 15, 16,  0,  7,  0,  0,  0,
          0,  0,  0,  6,  0, 15, 16,  8, 15,  2,  2,  2,  2,  2},
        { 0,  0,  0,  0,  0,  0,  8,  0,  0,  0,  7,  0,  0,  0,
          0,  0,  0,  6,  0,  0,  0,  8,  0,  0,  0,  0,  0,  0},
        {19, 19, 19, 19, 19, 13,  8, 11, 13,  0,  7,  0,  0,  0,
          0,  0,  0,  6,  0, 11, 13,  8, 11, 19, 19, 19, 19, 19},
        { 0,  0,  0,  0,  0,  6,  8,  9, 10,  0, 26,  2,  2,  2,
          2,  2,  2, 27,  0,  9, 10,  8,  7,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  6,  8,  9, 10,  0,  0,  0,  0,  0,
          0,  0,  0,  0,  0,  9, 10,  8,  7,  0,  0,  0,  0,  0},
        { 0,  0,  0,  0,  0,  6,  8,  9, 10,  0,  0,  0,  0,  0,
          0,  0,  0,  0,  0,  9, 10,  8,  7,  0,  0,  0,  0,  0},
        { 1,  2,  2,  2,  2, 16,  8, 15, 16,  0,  7,  0,  0,  0,
          0,  0,  0,  6,  0, 15, 16,  8, 15,  2,  2,  2,  2,  3},
        { 6,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  0,
          0,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  7},
        { 6,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8,  0},
        { 0,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8,  0},
        { 0, 14,  8,  8,  0,  0,  8,  8,  8,  8,  8,  8,  8,  0,
          0,  8,  8,  8,  8,  8,  8,  8,  0,  0,  8,  8, 14,  0},
        { 0,  0,  0,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8,  0,  0,  0},
        { 0,  0,  0,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8,  0,  0,  0},
        { 6,  8,  8,  8,  8,  8,  8,  0,  0,  8,  8,  8,  8,  0,
          0,  8,  8,  8,  8,  0,  0,  8,  8,  8,  8,  8,  8,  7},
        { 6,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8,  7},
        { 6,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8,  7},
        { 6,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,
          8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  7},
        {18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
         19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20}};

char marray[] = {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
                 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 6, 6, 6, 6,
                 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6,
                 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6,
                 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6,
                 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6,
                 6, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6,
                 6, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6,
                 6, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6,
                 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6,
                 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6,
                 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6,
                 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6,
                 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 6, 6, 6, 6,
                 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6};

struct sprite mario =
  {{{0x00, 0x00, 0x00},  /* black, transparent */
    {0xff, 0x00, 0x00},  /* red */
    {0x99, 0x66, 0x00},  /* brown */
    {0xe5, 0xb8, 0x87},  /* skin tone */
    {0x00, 0x00, 0xff},  /* blue */
    {0xff, 0xff, 0x00},  /* yellow */
    {0x00, 0x00, 0x00},  /* black, not transparent */
},
   14, 15,
   marray};

char marray2[] = {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
                 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 6, 6, 6, 6,
                 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6,
                 6, 6, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6,
                 6, 6, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6,
                 6, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
                 6, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6,
                 6, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6,
                 6, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6,
                 6, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
                 6, 6, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6,
                 6, 6, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6,
                 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6,
                 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 6, 6, 6, 6,
                 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6};

struct sprite mario2 =
  {{{0x00, 0x00, 0x00},  /* black, transparent */
    {0xff, 0x00, 0x00},  /* red */
    {0x99, 0x66, 0x00},  /* brown */
    {0xe5, 0xb8, 0x87},  /* skin tone */
    {0x00, 0x00, 0xff},  /* blue */
    {0xff, 0xff, 0x00},  /* yellow */
    {0x00, 0x00, 0x00},  /* black, not transparent */
},
   14, 15,
   marray2};

int posx;
int posy;
int deltax;

void drawSprite(struct sprite *s, int x, int y)
{
    int i;
    int j;
    int sz;
    int index;
    int color;

    sz = 1;
    for (i = 0; i < s->dimx; i++)
        for (j = 0; j < s->dimy; j++)
        {
        index = i + j * s->dimx;
        if (s->spritearray[index] != 0)
        tft.fillRect(x + i * sz, y + j * sz, sz, sz,
            tft.color565(s->rgbtable[s->spritearray[index]].r,
                         s->rgbtable[s->spritearray[index]].g,
                         s->rgbtable[s->spritearray[index]].b));
#if 0
        else
        {
          if ((x + y + i + j) % 2 == 0)
             color = ILI9341_BLACK;
          else
             color = ILI9341_BLUE;
          tft.fillRect(x + i * sz, y + j * sz, sz, sz, color);
        }
#endif
        }
}

void drawTile(int x, int y, struct tile tile)
{
  int color;
  int mask;
  int i;
  int j;

  color = tft.color565(tile.color.r, tile.color.g,
                       tile.color.b);
  for (i = 0; i < 8; i++)
  {
    mask = 0x80;
    for (j = 0; j < 8; j++)
    {
      if (tile.data[i] & mask)
        tft.drawPixel(x + j, y + i, color);
      mask = mask / 2;
    }
  }
}

void tileScreen(void)
{
  int i;
  int j;

  for (i = 0; i < TWIDTH; i++)
    for (j = 0; j < THEIGHT; j++)
      drawTile(XOFFS + i * 8, YOFFS + j * 8, tileinfo[tilemap[j][i]]);
}


void setup()
{
//Serial.begin(115200);
//	while (!Serial);
	
        posx = 100;
        posy =  77;
        deltax = 1;
	tft.begin();			// initialize LCD
	tft.fillScreen(ILI9341_BLACK);
        tileScreen();
}

void loop(void)
{
   int rdx;
   int rdy;
   int deltay;

#if 0
   rdx = analogRead(1);
   if (rdx < 512 - 20)
      deltax = 1;
   else if (rdx < 512 - 140)
      deltax = 2;
   else if (rdx > 512 + 20)
      deltax = -1;
   else if (rdx > 512 + 140)
      deltax = -2;
   posx = posx + deltax;
   if (posx < 10)
       posx = 10;
   if (posx > 200)
       posx = 200;
   rdy = analogRead(0);
   if (rdy < 512 - 40)
      deltay = -2;
   else if (rdy > 512 + 40)
      deltay = 2;
   posy = posy + deltay;
   if (posy < 10)
       posy = 10;
   if (posy > 200)
       posy = 200;
#endif
   posx = posx + deltax;
   if (posx > 208)
     deltax = -1 * deltax;
   if (posx < 18)
     deltax = -1 * deltax;
   if (posx & 8)
     drawSprite(&mario, posx, posy);
   else
     drawSprite(&mario2, posx, posy);
   delay(20);

// delay(50);
}

